{"version":3,"sources":["../../src/core/core.ts"],"sourcesContent":["import { createHash } from 'crypto'\nimport { uid } from 'uid/secure'\n\nexport type InjectionToken = string | symbol\nexport type Ctr<T = any> = new (...args: any[]) => T\nexport type InjectType = 'useClass' | 'useValue' | 'useFactory'\nexport type IdentifierType = Ctr\n\n/**\n * This class is used to identify the injection token\n */\nclass InjectionIdentifier {\n  private _id: string\n  private _token: InjectionToken\n  private _type: InjectType\n  private _identifier: any\n  private _boundTarget?: Ctr\n\n  private _generateId() {\n    return uid(21)\n  }\n\n  private _generateToken(id: string, identifier: Ctr) {\n    return createHash('sha256').update(`${id}_${identifier.name}`).digest('hex')\n  }\n\n  constructor(identifier: Ctr, type: InjectType = 'useClass') {\n    this._id = this._generateId()\n    this._type = type\n\n    switch (type) {\n      case 'useClass':\n        this._token = this._generateToken(this._id, identifier)\n        this._identifier = identifier\n        break\n      case 'useValue':\n        this._token = this._generateToken(this._id, identifier)\n        this._identifier = identifier\n        break\n      case 'useFactory':\n        this._token = this._generateToken(this._id, identifier)\n        this._identifier = identifier\n        break\n    }\n\n    return this\n  }\n\n  public get id() {\n    return this._id\n  }\n\n  public get token() {\n    return this._token\n  }\n\n  public get type() {\n    return this._type\n  }\n\n  public get identifier() {\n    return this._identifier\n  }\n\n  public get boundTarget() {\n    return this._boundTarget\n  }\n\n  public bindTo(target: Ctr) {\n    this._boundTarget = target\n    return this\n  }\n}\n\nexport class DIContainer {\n  private _container = new Map<InjectionToken, any>()\n\n  // Make constructor protected so it can only be instantiated via getInstance\n  protected constructor() {\n    // Protected constructor to prevent direct instantiation\n  }\n\n  public getDependency<T>(token: InjectionToken): T {\n    const instance = this._container.get(token)\n    if (!instance) {\n      throw new Error(`No dependency found for token: ${String(token)}`)\n    }\n    return instance as T\n  }\n\n  public register<T>(token: InjectionToken, instance: T, type: InjectType = 'useClass'): void {\n    this._container.set(token, instance)\n  }\n\n  public resolve<T>(target: new (...args: any[]) => T): T {\n    return new target()\n  }\n\n  private static _instance: DIContainer\n\n  public static getInstance(): DIContainer {\n    if (!DIContainer._instance) {\n      DIContainer._instance = new DIContainer()\n    }\n\n    return DIContainer._instance\n  }\n}\n"],"names":["DIContainer","InjectionIdentifier","_generateId","uid","_generateToken","id","identifier","createHash","update","name","digest","_id","token","_token","type","_type","_identifier","boundTarget","_boundTarget","bindTo","target","constructor","getDependency","instance","_container","get","Error","String","register","set","resolve","getInstance","_instance","Map"],"mappings":";;;;+BA0EaA;;;eAAAA;;;wBA1Ec;wBACP;;;;;;;;;;;;;;AAOpB;;CAEC,GACD,IAAA,AAAMC,sBAAN,MAAMA;IAOIC,cAAc;QACpB,OAAOC,IAAAA,WAAG,EAAC;IACb;IAEQC,eAAeC,EAAU,EAAEC,UAAe,EAAE;QAClD,OAAOC,IAAAA,kBAAU,EAAC,UAAUC,MAAM,CAAC,GAAGH,GAAG,CAAC,EAAEC,WAAWG,IAAI,EAAE,EAAEC,MAAM,CAAC;IACxE;IAwBA,IAAWL,KAAK;QACd,OAAO,IAAI,CAACM,GAAG;IACjB;IAEA,IAAWC,QAAQ;QACjB,OAAO,IAAI,CAACC,MAAM;IACpB;IAEA,IAAWC,OAAO;QAChB,OAAO,IAAI,CAACC,KAAK;IACnB;IAEA,IAAWT,aAAa;QACtB,OAAO,IAAI,CAACU,WAAW;IACzB;IAEA,IAAWC,cAAc;QACvB,OAAO,IAAI,CAACC,YAAY;IAC1B;IAEOC,OAAOC,MAAW,EAAE;QACzB,IAAI,CAACF,YAAY,GAAGE;QACpB,OAAO,IAAI;IACb;IA7CAC,YAAYf,UAAe,EAAEQ,OAAmB,UAAU,CAAE;QAd5D,uBAAQH,OAAR,KAAA;QACA,uBAAQE,UAAR,KAAA;QACA,uBAAQE,SAAR,KAAA;QACA,uBAAQC,eAAR,KAAA;QACA,uBAAQE,gBAAR,KAAA;QAWE,IAAI,CAACP,GAAG,GAAG,IAAI,CAACT,WAAW;QAC3B,IAAI,CAACa,KAAK,GAAGD;QAEb,OAAQA;YACN,KAAK;gBACH,IAAI,CAACD,MAAM,GAAG,IAAI,CAACT,cAAc,CAAC,IAAI,CAACO,GAAG,EAAEL;gBAC5C,IAAI,CAACU,WAAW,GAAGV;gBACnB;YACF,KAAK;gBACH,IAAI,CAACO,MAAM,GAAG,IAAI,CAACT,cAAc,CAAC,IAAI,CAACO,GAAG,EAAEL;gBAC5C,IAAI,CAACU,WAAW,GAAGV;gBACnB;YACF,KAAK;gBACH,IAAI,CAACO,MAAM,GAAG,IAAI,CAACT,cAAc,CAAC,IAAI,CAACO,GAAG,EAAEL;gBAC5C,IAAI,CAACU,WAAW,GAAGV;gBACnB;QACJ;QAEA,OAAO,IAAI;IACb;AA0BF;AAEO,IAAA,AAAMN,cAAN,MAAMA;IAQJsB,cAAiBV,KAAqB,EAAK;QAChD,MAAMW,WAAW,IAAI,CAACC,UAAU,CAACC,GAAG,CAACb;QACrC,IAAI,CAACW,UAAU;YACb,MAAM,IAAIG,MAAM,CAAC,+BAA+B,EAAEC,OAAOf,QAAQ;QACnE;QACA,OAAOW;IACT;IAEOK,SAAYhB,KAAqB,EAAEW,QAAW,EAAET,OAAmB,UAAU,EAAQ;QAC1F,IAAI,CAACU,UAAU,CAACK,GAAG,CAACjB,OAAOW;IAC7B;IAEOO,QAAWV,MAAiC,EAAK;QACtD,OAAO,IAAIA;IACb;IAIA,OAAcW,cAA2B;QACvC,IAAI,CAAC/B,YAAYgC,SAAS,EAAE;YAC1BhC,YAAYgC,SAAS,GAAG,IAAIhC;QAC9B;QAEA,OAAOA,YAAYgC,SAAS;IAC9B;IA7BA,4EAA4E;IAC5E,aAAwB;QAHxB,uBAAQR,cAAa,IAAIS;IAIvB,wDAAwD;IAC1D;AA2BF;AATE,iBAxBWjC,aAwBIgC,aAAf,KAAA"}