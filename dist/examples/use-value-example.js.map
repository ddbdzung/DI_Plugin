{"version":3,"sources":["../../src/examples/use-value-example.ts"],"sourcesContent":["import { DIContainer } from '../core/core'\n\n// Example 1: Injecting a configuration object\ninterface DatabaseConfig {\n  host: string\n  port: number\n  username: string\n  password: string\n}\n\nconst databaseConfig: DatabaseConfig = {\n  host: 'localhost',\n  port: 5432,\n  username: 'admin',\n  password: 'secret123',\n}\n\n// Example 2: Injecting a service instance\nclass LoggerService {\n  log(message: string) {\n    console.log(`[${new Date().toISOString()}] ${message}`)\n  }\n}\n\nconst loggerInstance = new LoggerService()\n\n// Example 3: Injecting a constant value\nconst API_VERSION = 'v1'\nconst MAX_RETRIES = 3\n\n// Register the values in the container\nconst container = DIContainer.getInstance()\n\n// Register configuration\ncontainer.register('DATABASE_CONFIG', databaseConfig, 'useValue')\n\n// Register logger instance\ncontainer.register('LOGGER', loggerInstance, 'useValue')\n\n// Register constants\ncontainer.register('API_VERSION', API_VERSION, 'useValue')\ncontainer.register('MAX_RETRIES', MAX_RETRIES, 'useValue')\n\n// Example usage\nclass DatabaseService {\n  constructor(\n    private config: DatabaseConfig,\n    private logger: LoggerService,\n    private apiVersion: string,\n    private maxRetries: number,\n  ) {}\n\n  connect() {\n    this.logger.log(`Connecting to database at ${this.config.host}:${this.config.port}`)\n    this.logger.log(`Using API version: ${this.apiVersion}`)\n    this.logger.log(`Max retries configured: ${this.maxRetries}`)\n  }\n}\n\n// Usage - use getDependency instead of resolve\n// Or create the service manually and inject dependencies from container\nconst dbService = new DatabaseService(\n  container.getDependency<DatabaseConfig>('DATABASE_CONFIG'),\n  container.getDependency<LoggerService>('LOGGER'),\n  container.getDependency<string>('API_VERSION'),\n  container.getDependency<number>('MAX_RETRIES'),\n)\ndbService.connect()\n"],"names":["databaseConfig","host","port","username","password","LoggerService","log","message","console","Date","toISOString","loggerInstance","API_VERSION","MAX_RETRIES","container","DIContainer","getInstance","register","DatabaseService","connect","logger","config","apiVersion","maxRetries","constructor","dbService","getDependency"],"mappings":";;;;sBAA4B;;;;;;;;;;;;;;AAU5B,MAAMA,iBAAiC;IACrCC,MAAM;IACNC,MAAM;IACNC,UAAU;IACVC,UAAU;AACZ;AAEA,0CAA0C;AAC1C,IAAA,AAAMC,gBAAN,MAAMA;IACJC,IAAIC,OAAe,EAAE;QACnBC,QAAQF,GAAG,CAAC,CAAC,CAAC,EAAE,IAAIG,OAAOC,WAAW,GAAG,EAAE,EAAEH,SAAS;IACxD;AACF;AAEA,MAAMI,iBAAiB,IAAIN;AAE3B,wCAAwC;AACxC,MAAMO,cAAc;AACpB,MAAMC,cAAc;AAEpB,uCAAuC;AACvC,MAAMC,YAAYC,iBAAW,CAACC,WAAW;AAEzC,yBAAyB;AACzBF,UAAUG,QAAQ,CAAC,mBAAmBjB,gBAAgB;AAEtD,2BAA2B;AAC3Bc,UAAUG,QAAQ,CAAC,UAAUN,gBAAgB;AAE7C,qBAAqB;AACrBG,UAAUG,QAAQ,CAAC,eAAeL,aAAa;AAC/CE,UAAUG,QAAQ,CAAC,eAAeJ,aAAa;AAE/C,gBAAgB;AAChB,IAAA,AAAMK,kBAAN,MAAMA;IAQJC,UAAU;QACR,IAAI,CAACC,MAAM,CAACd,GAAG,CAAC,CAAC,0BAA0B,EAAE,IAAI,CAACe,MAAM,CAACpB,IAAI,CAAC,CAAC,EAAE,IAAI,CAACoB,MAAM,CAACnB,IAAI,EAAE;QACnF,IAAI,CAACkB,MAAM,CAACd,GAAG,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAACgB,UAAU,EAAE;QACvD,IAAI,CAACF,MAAM,CAACd,GAAG,CAAC,CAAC,wBAAwB,EAAE,IAAI,CAACiB,UAAU,EAAE;IAC9D;IAXAC,YACE,AAAQH,MAAsB,EAC9B,AAAQD,MAAqB,EAC7B,AAAQE,UAAkB,EAC1B,AAAQC,UAAkB,CAC1B;;;;;aAJQF,SAAAA;aACAD,SAAAA;aACAE,aAAAA;aACAC,aAAAA;IACP;AAOL;AAEA,+CAA+C;AAC/C,wEAAwE;AACxE,MAAME,YAAY,IAAIP,gBACpBJ,UAAUY,aAAa,CAAiB,oBACxCZ,UAAUY,aAAa,CAAgB,WACvCZ,UAAUY,aAAa,CAAS,gBAChCZ,UAAUY,aAAa,CAAS;AAElCD,UAAUN,OAAO"}