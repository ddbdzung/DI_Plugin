{"version":3,"sources":["../../src/examples/scope-decorators-example.ts"],"sourcesContent":["import 'reflect-metadata'\nimport 'source-map-support/register' // Register source-map-support at the entry point\nimport { DIContainer } from '../core/core'\n\n// Lifetime options for dependencies\nenum Lifetime {\n  Singleton, // One instance for the entire application\n  Scoped, // One instance per scope (e.g., per tenant/request)\n  Transient, // New instance every time\n}\n\n// Metadata keys\nconst INJECT_METADATA_KEY = 'inject:dependencies'\nconst LIFETIME_METADATA_KEY = 'inject:lifetime'\n\n// Service decorator that marks a class as injectable\nfunction Service(lifetime: Lifetime = Lifetime.Singleton) {\n  return function (target: any) {\n    Reflect.defineMetadata(LIFETIME_METADATA_KEY, lifetime, target)\n    return target\n  }\n}\n\n// Inject decorator for constructor parameters\nfunction Inject(token: string) {\n  return function (\n    target: Object,\n    propertyKey: string | symbol | undefined,\n    parameterIndex: number,\n  ) {\n    const existingInjectParams: Map<number, string> =\n      Reflect.getOwnMetadata(INJECT_METADATA_KEY, target) || new Map<number, string>()\n\n    existingInjectParams.set(parameterIndex, token)\n    Reflect.defineMetadata(INJECT_METADATA_KEY, existingInjectParams, target)\n  }\n}\n\n// Decorator for tenant ID injection\nfunction InjectTenantId() {\n  return function (\n    target: Object,\n    propertyKey: string | symbol | undefined,\n    parameterIndex: number,\n  ) {\n    const existingInjectParams: Map<number, string> =\n      Reflect.getOwnMetadata(INJECT_METADATA_KEY, target) || new Map<number, string>()\n\n    existingInjectParams.set(parameterIndex, '__TENANT_ID__')\n    Reflect.defineMetadata(INJECT_METADATA_KEY, existingInjectParams, target)\n  }\n}\n\n// Rather than extending DIContainer, create our own implementation\n// since the current DIContainer may not be properly exported as a class\nclass EnhancedDIContainer {\n  private _singletons = new Map<string, any>()\n  private static _instance: EnhancedDIContainer\n\n  public static getInstance(): EnhancedDIContainer {\n    if (!EnhancedDIContainer._instance) {\n      EnhancedDIContainer._instance = new EnhancedDIContainer()\n    }\n    return EnhancedDIContainer._instance\n  }\n\n  public createScope(tenantId: string): ScopeContainer {\n    return new ScopeContainer(tenantId, this)\n  }\n\n  public register<T>(token: string, target: any, lifetime: Lifetime = Lifetime.Singleton): void {\n    this._singletons.set(token, { target, lifetime })\n  }\n\n  public getDependency<T>(token: string): T {\n    if (token === '__TENANT_ID__') {\n      throw new Error('Tenant ID can only be resolved within a scope')\n    }\n\n    const registration = this._singletons.get(token)\n    if (!registration) {\n      throw new Error(`No registration for token: ${token}`)\n    }\n\n    if (registration.lifetime !== Lifetime.Singleton) {\n      throw new Error(`Cannot resolve non-singleton dependency outside of scope: ${token}`)\n    }\n\n    // Create the singleton if it doesn't exist\n    if (!registration.instance) {\n      registration.instance = this.createInstance(registration.target)\n    }\n\n    return registration.instance as T\n  }\n\n  private createInstance<T>(target: any): T {\n    // Get constructor parameters\n    const injectMetadata: Map<number, string> =\n      Reflect.getOwnMetadata(INJECT_METADATA_KEY, target) || new Map<number, string>()\n\n    // Resolve dependencies\n    const deps = []\n    for (let i = 0; i < target.length; i++) {\n      const token = injectMetadata.get(i)\n      if (token) {\n        deps.push(this.getDependency(token))\n      } else {\n        deps.push(undefined)\n      }\n    }\n\n    return new target(...deps)\n  }\n}\n\nclass ScopeContainer {\n  private _scopedInstances = new Map<string, any>()\n\n  constructor(\n    private _tenantId: string,\n    private _parentContainer: EnhancedDIContainer,\n  ) {}\n\n  getDependency<T>(token: string): T {\n    // Special case for tenant ID\n    if (token === '__TENANT_ID__') {\n      return this._tenantId as unknown as T\n    }\n\n    // Check if we already have an instance in this scope\n    if (this._scopedInstances.has(token)) {\n      return this._scopedInstances.get(token) as T\n    }\n\n    // Check parent container\n    try {\n      return this._parentContainer.getDependency<T>(token)\n    } catch (error) {\n      // If the error is that we need a scope, then we'll create the instance\n      const registration = this._parentContainer['_singletons'].get(token)\n      if (!registration) {\n        throw new Error(`No registration for token: ${token}`)\n      }\n\n      // Create and cache an instance if it's scoped\n      if (registration.lifetime === Lifetime.Scoped) {\n        const instance = this.createInstance(registration.target) as T\n        this._scopedInstances.set(token, instance)\n        return instance\n      }\n\n      // For transient, create but don't cache\n      if (registration.lifetime === Lifetime.Transient) {\n        return this.createInstance(registration.target) as T\n      }\n\n      throw error\n    }\n  }\n\n  private createInstance<T>(target: any): T {\n    // Get constructor parameters\n    const injectMetadata: Map<number, string> =\n      Reflect.getOwnMetadata(INJECT_METADATA_KEY, target) || new Map<number, string>()\n\n    // Resolve dependencies\n    const deps = []\n    for (let i = 0; i < target.length; i++) {\n      const token = injectMetadata.get(i)\n      if (token) {\n        deps.push(this.getDependency(token))\n      } else {\n        deps.push(undefined)\n      }\n    }\n\n    return new target(...deps)\n  }\n\n  dispose(): void {\n    this._scopedInstances.clear()\n  }\n}\n\n// Example usage with decorators\n\n// Singleton service (shared across tenants)\n@Service(Lifetime.Singleton)\nclass PaymentGateway {\n  processPayment(orderId: string, amount: number): boolean {\n    console.log(`Processing payment of ${amount} for order ${orderId}`)\n    return true\n  }\n}\n\n// Scoped service (one per tenant)\n@Service(Lifetime.Scoped)\nclass OrderService {\n  constructor(\n    @InjectTenantId() private tenantId: string,\n    @Inject('PAYMENT_GATEWAY') private paymentGateway: PaymentGateway,\n  ) {\n    console.log(`Created OrderService for tenant: ${tenantId}`)\n  }\n\n  createOrder(items: string[]) {\n    const orderId = `${this.tenantId}-${Date.now()}`\n    console.log(\n      `[Tenant: ${this.tenantId}] Creating order ${orderId} with items: ${items.join(', ')}`,\n    )\n    return { orderId, items }\n  }\n\n  processOrder(orderId: string, amount: number) {\n    console.log(`[Tenant: ${this.tenantId}] Processing order ${orderId}`)\n    return this.paymentGateway.processPayment(orderId, amount)\n  }\n}\n\n// Transient service (new instance each time)\n@Service(Lifetime.Transient)\nclass ShoppingCart {\n  private items: string[] = []\n\n  constructor(@InjectTenantId() private tenantId: string) {\n    console.log(`Created new ShoppingCart for tenant: ${tenantId}`)\n  }\n\n  addItem(item: string) {\n    this.items.push(item)\n    console.log(\n      `[Tenant: ${this.tenantId}] Added ${item} to cart, total items: ${this.items.length}`,\n    )\n  }\n\n  getItems() {\n    return [...this.items]\n  }\n}\n\n// Example function to run the demo\nexport function runDecoratorExample() {\n  // Initialize the container\n  const container = EnhancedDIContainer.getInstance()\n\n  // Register services\n  container.register('PAYMENT_GATEWAY', PaymentGateway)\n  container.register('ORDER_SERVICE', OrderService, Lifetime.Scoped)\n  container.register('SHOPPING_CART', ShoppingCart, Lifetime.Transient)\n\n  // Simulate requests from different tenants\n  processTenantRequest('tenant-1')\n  processTenantRequest('tenant-2')\n  processTenantRequest('tenant-1')\n}\n\n// Example multi-tenant usage\nfunction processTenantRequest(tenantId: string) {\n  console.log(`\\n--- Request from tenant: ${tenantId} ---`)\n\n  // Create a scope for this tenant\n  const scope = EnhancedDIContainer.getInstance().createScope(tenantId)\n\n  try {\n    // Get services (scoped and transient)\n    const orderService = scope.getDependency<OrderService>('ORDER_SERVICE')\n\n    // Each call to get a transient service creates a new instance\n    const cart1 = scope.getDependency<ShoppingCart>('SHOPPING_CART')\n    cart1.addItem('Phone')\n\n    const cart2 = scope.getDependency<ShoppingCart>('SHOPPING_CART')\n    cart2.addItem('Laptop')\n\n    // Demonstrate that cart1 and cart2 are different instances\n    console.log(\n      `Cart 1 items: ${cart1.getItems().length}, Cart 2 items: ${cart2.getItems().length}`,\n    )\n\n    // Use the scoped OrderService\n    const order = orderService.createOrder(['Phone', 'Laptop'])\n    orderService.processOrder(order.orderId, 1299.99)\n  } finally {\n    // Clean up scope when request is complete\n    scope.dispose()\n    console.log(`Disposed scope for tenant: ${tenantId}`)\n  }\n}\n\n// Only run the example if this file is being executed directly\nif (require.main === module) {\n  runDecoratorExample()\n}\n"],"names":["runDecoratorExample","Lifetime","INJECT_METADATA_KEY","LIFETIME_METADATA_KEY","Service","lifetime","target","Reflect","defineMetadata","Inject","token","propertyKey","parameterIndex","existingInjectParams","getOwnMetadata","Map","set","InjectTenantId","EnhancedDIContainer","getInstance","_instance","createScope","tenantId","ScopeContainer","register","_singletons","getDependency","Error","registration","get","instance","createInstance","injectMetadata","deps","i","length","push","undefined","_tenantId","_scopedInstances","has","_parentContainer","error","dispose","clear","constructor","PaymentGateway","processPayment","orderId","amount","console","log","OrderService","createOrder","items","Date","now","join","processOrder","paymentGateway","ShoppingCart","addItem","item","getItems","container","processTenantRequest","scope","orderService","cart1","cart2","order","require","main","module"],"mappings":"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"}