{"version":3,"sources":["../../src/examples/multi-tenant-scope-example.ts"],"sourcesContent":["import { DIContainer, InjectType } from '../core/core'\n\n// Extension to DIContainer to support scopes\nclass ScopedDIContainer {\n  private _scopedInstances = new Map<string, ScopeContainer>()\n  private _container: DIContainer\n  private static _instance: ScopedDIContainer\n\n  private constructor() {\n    this._container = DIContainer.getInstance()\n  }\n\n  public static getInstance(): ScopedDIContainer {\n    if (!ScopedDIContainer._instance) {\n      ScopedDIContainer._instance = new ScopedDIContainer()\n    }\n    return ScopedDIContainer._instance\n  }\n\n  public createScope(scopeId: string): ScopeContainer {\n    if (!this._scopedInstances.has(scopeId)) {\n      this._scopedInstances.set(scopeId, new ScopeContainer(scopeId, this._container))\n    }\n    return this._scopedInstances.get(scopeId)!\n  }\n\n  // Delegate methods to underlying DIContainer\n  public register<T>(token: string, instance: T, type: InjectType = 'useClass'): void {\n    this._container.register(token, instance, type)\n  }\n\n  public getDependency<T>(token: string): T {\n    return this._container.getDependency<T>(token)\n  }\n}\n\n// Scope container for tenant-specific services\nclass ScopeContainer {\n  private _scopedInstances = new Map<string, any>()\n\n  constructor(\n    private _scopeId: string,\n    private _parentContainer: DIContainer,\n  ) {}\n\n  // Register a scoped service\n  registerScoped<T>(token: string, factory: (scopeId: string) => T): void {\n    this._scopedInstances.set(token, factory(this._scopeId))\n  }\n\n  // Get a dependency - first check scoped instances, then parent container\n  getDependency<T>(token: string): T {\n    if (this._scopedInstances.has(token)) {\n      return this._scopedInstances.get(token)\n    }\n\n    return this._parentContainer.getDependency<T>(token)\n  }\n\n  // Dispose of all scoped instances\n  dispose(): void {\n    this._scopedInstances.clear()\n  }\n}\n\n// Example domain services in a multi-tenant e-commerce application\n\n// Shared services (singletons)\nclass PaymentGateway {\n  processPayment(amount: number, currency: string) {\n    console.log(`Processing payment of ${amount} ${currency}`)\n    return true\n  }\n}\n\n// Tenant-specific services that need scoping\nclass TenantOrderService {\n  constructor(\n    private tenantId: string,\n    private paymentGateway: PaymentGateway,\n  ) {\n    console.log(`Creating OrderService for tenant: ${tenantId}`)\n  }\n\n  createOrder(items: string[]) {\n    console.log(`[Tenant: ${this.tenantId}] Creating order with items: ${items.join(', ')}`)\n    return { orderId: `${this.tenantId}-${Date.now()}`, items }\n  }\n\n  processOrderPayment(orderId: string, amount: number) {\n    console.log(`[Tenant: ${this.tenantId}] Processing payment for order ${orderId}`)\n    return this.paymentGateway.processPayment(amount, 'USD')\n  }\n}\n\nclass TenantProductCatalog {\n  constructor(private tenantId: string) {\n    console.log(`Creating ProductCatalog for tenant: ${tenantId}`)\n  }\n\n  getProducts() {\n    return [\n      { id: `${this.tenantId}-1`, name: 'Product 1' },\n      { id: `${this.tenantId}-2`, name: 'Product 2' },\n    ]\n  }\n}\n\n// Setup the container - get singleton instance instead of using new\nconst container = ScopedDIContainer.getInstance()\n\n// Register shared services as singletons\nconst paymentGateway = new PaymentGateway()\ncontainer.register('PAYMENT_GATEWAY', paymentGateway, 'useValue')\n\n// Example usage with tenant scopes\nfunction handleTenantRequest(tenantId: string, action: string) {\n  console.log(`\\n--- Handling request for tenant: ${tenantId} ---`)\n\n  // Create a scope for this tenant request\n  const tenantScope = container.createScope(tenantId)\n\n  // Register tenant-specific services in this scope with explicit typing\n  tenantScope.registerScoped<TenantOrderService>(\n    'ORDER_SERVICE',\n    (scopeId: string) =>\n      new TenantOrderService(scopeId, tenantScope.getDependency('PAYMENT_GATEWAY')),\n  )\n\n  tenantScope.registerScoped<TenantProductCatalog>(\n    'PRODUCT_CATALOG',\n    (scopeId: string) => new TenantProductCatalog(scopeId),\n  )\n\n  try {\n    // Execute the tenant-specific business logic\n    if (action === 'list-products') {\n      const productCatalog = tenantScope.getDependency<TenantProductCatalog>('PRODUCT_CATALOG')\n      const products = productCatalog.getProducts()\n      console.log(`Found ${products.length} products for tenant ${tenantId}`)\n    } else if (action === 'create-order') {\n      const orderService = tenantScope.getDependency<TenantOrderService>('ORDER_SERVICE')\n      const order = orderService.createOrder(['Phone', 'Laptop'])\n      orderService.processOrderPayment(order.orderId, 1299.99)\n    }\n  } finally {\n    // Clean up the scope when the request is done\n    console.log(`Disposing scope for tenant: ${tenantId}`)\n    tenantScope.dispose()\n  }\n}\n\n// Simulate multiple tenant requests\n// Only run this example when directly executed\nif (require.main === module) {\n  handleTenantRequest('tenant-1', 'list-products')\n  handleTenantRequest('tenant-2', 'create-order')\n  handleTenantRequest('tenant-1', 'create-order')\n}\n"],"names":["ScopedDIContainer","getInstance","_instance","createScope","scopeId","_scopedInstances","has","set","ScopeContainer","_container","get","register","token","instance","type","getDependency","Map","DIContainer","registerScoped","factory","_scopeId","_parentContainer","dispose","clear","constructor","PaymentGateway","processPayment","amount","currency","console","log","TenantOrderService","createOrder","items","tenantId","join","orderId","Date","now","processOrderPayment","paymentGateway","TenantProductCatalog","getProducts","id","name","container","handleTenantRequest","action","tenantScope","productCatalog","products","length","orderService","order","require","main","module"],"mappings":"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"}